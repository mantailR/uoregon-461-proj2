Terminals unused in grammar

    DEF
    EXTENDS
    WHILE
    RETURN
    TYPECASE
    ATLEAST
    ATMOST
    EQUALS
    OR
    NOT
    '>'
    '<'
    '/'


State 72 conflicts: 4 reduce/reduce


Grammar

    0 $accept: pgm $end

    1 pgm: classes statements

    2 classes: %empty
    3        | classes class

    4 class: CLASS ident '(' formals ')' '{' expr actual_args '}'

    5 formals: %empty
    6        | formals ',' formal

    7 formal: ident ':' ident

    8 statements: statements statement
    9           | %empty

   10 statement_block: '{' statements '}'

   11 statement: IF expr statement_block opt_elif_parts

   12 opt_elif_parts: ELIF expr statement_block opt_elif_parts
   13               | ELSE statement_block
   14               | %empty

   15 statement: l_expr '=' expr ';'
   16          | l_expr ':' ident '=' expr ';'

   17 l_expr: IDENT

   18 expr: l_expr
   19     | STRING_LIT
   20     | INT_LIT
   21     | expr '*' expr
   22     | expr '+' expr
   23     | expr '-' expr
   24     | '-' expr
   25     | expr AND expr
   26     | expr '.' ident '(' actual_args ')'

   27 actual_args: %empty
   28            | actual_args_nonempty

   29 actual_args_nonempty: actual_args_nonempty ',' expr
   30                     | expr

   31 expr: ident '(' actual_args ')'

   32 ident: IDENT


Terminals, with rules where they appear

    $end (0) 0
    '(' (40) 4 26 31
    ')' (41) 4 26 31
    '*' (42) 21
    '+' (43) 22
    ',' (44) 6 29
    '-' (45) 23 24
    '.' (46) 26
    '/' (47)
    ':' (58) 7 16
    ';' (59) 15 16
    '<' (60)
    '=' (61) 15 16
    '>' (62)
    '{' (123) 4 10
    '}' (125) 4 10
    error (256)
    CLASS (258) 4
    DEF (259)
    EXTENDS (260)
    IF (261) 11
    ELIF (262) 12
    ELSE (263) 13
    WHILE (264)
    RETURN (265)
    TYPECASE (266)
    ATLEAST (267)
    ATMOST (268)
    EQUALS (269)
    AND (270) 25
    OR (271)
    NOT (272)
    IDENT <str> (273) 17 32
    INT_LIT <num> (274) 20
    STRING_LIT <str> (275) 19
    NEG (276)


Nonterminals, with rules where they appear

    $accept (37)
        on left: 0
    pgm <node> (38)
        on left: 1
        on right: 0
    classes <classes> (39)
        on left: 2 3
        on right: 1 3
    class <node> (40)
        on left: 4
        on right: 3
    formals <formals> (41)
        on left: 5 6
        on right: 4 6
    formal <node> (42)
        on left: 7
        on right: 6
    statements <block> (43)
        on left: 8 9
        on right: 1 8 10
    statement_block <block> (44)
        on left: 10
        on right: 11 12 13
    statement <statement> (45)
        on left: 11 15 16
        on right: 8
    opt_elif_parts <block> (46)
        on left: 12 13 14
        on right: 11 12
    l_expr <l_expr> (47)
        on left: 17
        on right: 15 16 18
    expr <expr> (48)
        on left: 18 19 20 21 22 23 24 25 26 31
        on right: 4 11 12 15 16 21 22 23 24 25 26 29 30
    actual_args <actuals> (49)
        on left: 27 28
        on right: 4 26 31
    actual_args_nonempty <actuals> (50)
        on left: 29 30
        on right: 28 29
    ident <ident> (51)
        on left: 32
        on right: 4 7 16 26 31


State 0

    0 $accept: . pgm $end
    1 pgm: . classes statements
    2 classes: . %empty
    3        | . classes class

    $default  reduce using rule 2 (classes)

    pgm      go to state 1
    classes  go to state 2


State 1

    0 $accept: pgm . $end

    $end  shift, and go to state 3


State 2

    1 pgm: classes . statements
    3 classes: classes . class
    4 class: . CLASS ident '(' formals ')' '{' expr actual_args '}'
    8 statements: . statements statement
    9           | . %empty  [$end, IF, IDENT]

    CLASS  shift, and go to state 4

    $default  reduce using rule 9 (statements)

    class       go to state 5
    statements  go to state 6


State 3

    0 $accept: pgm $end .

    $default  accept


State 4

    4 class: CLASS . ident '(' formals ')' '{' expr actual_args '}'
   32 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 8


State 5

    3 classes: classes class .

    $default  reduce using rule 3 (classes)


State 6

    1 pgm: classes statements .  [$end]
    8 statements: statements . statement
   11 statement: . IF expr statement_block opt_elif_parts
   15          | . l_expr '=' expr ';'
   16          | . l_expr ':' ident '=' expr ';'
   17 l_expr: . IDENT

    IF     shift, and go to state 9
    IDENT  shift, and go to state 10

    $default  reduce using rule 1 (pgm)

    statement  go to state 11
    l_expr     go to state 12


State 7

   32 ident: IDENT .

    $default  reduce using rule 32 (ident)


State 8

    4 class: CLASS ident . '(' formals ')' '{' expr actual_args '}'

    '('  shift, and go to state 13


State 9

   11 statement: IF . expr statement_block opt_elif_parts
   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 19
    ident   go to state 20


State 10

   17 l_expr: IDENT .

    $default  reduce using rule 17 (l_expr)


State 11

    8 statements: statements statement .

    $default  reduce using rule 8 (statements)


State 12

   15 statement: l_expr . '=' expr ';'
   16          | l_expr . ':' ident '=' expr ';'

    ':'  shift, and go to state 21
    '='  shift, and go to state 22


State 13

    4 class: CLASS ident '(' . formals ')' '{' expr actual_args '}'
    5 formals: . %empty
    6        | . formals ',' formal

    $default  reduce using rule 5 (formals)

    formals  go to state 23


State 14

   17 l_expr: IDENT .  [AND, IDENT, INT_LIT, STRING_LIT, '+', '-', '*', '.', ')', '{', '}', ',', ';']
   32 ident: IDENT .  ['(']

    '('       reduce using rule 32 (ident)
    $default  reduce using rule 17 (l_expr)


State 15

   20 expr: INT_LIT .

    $default  reduce using rule 20 (expr)


State 16

   19 expr: STRING_LIT .

    $default  reduce using rule 19 (expr)


State 17

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   24     | '-' . expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 24
    ident   go to state 20


State 18

   18 expr: l_expr .

    $default  reduce using rule 18 (expr)


State 19

   10 statement_block: . '{' statements '}'
   11 statement: IF expr . statement_block opt_elif_parts
   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    '{'  shift, and go to state 30

    statement_block  go to state 31


State 20

   31 expr: ident . '(' actual_args ')'

    '('  shift, and go to state 32


State 21

   16 statement: l_expr ':' . ident '=' expr ';'
   32 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 33


State 22

   15 statement: l_expr '=' . expr ';'
   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 34
    ident   go to state 20


State 23

    4 class: CLASS ident '(' formals . ')' '{' expr actual_args '}'
    6 formals: formals . ',' formal

    ')'  shift, and go to state 35
    ','  shift, and go to state 36


State 24

   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   24     | '-' expr .  [AND, IDENT, INT_LIT, STRING_LIT, '+', '-', '*', ')', '{', '}', ',', ';']
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    '.'  shift, and go to state 29

    $default  reduce using rule 24 (expr)

    Conflict between rule 24 and token AND resolved as reduce (AND < NEG).
    Conflict between rule 24 and token '+' resolved as reduce ('+' < NEG).
    Conflict between rule 24 and token '-' resolved as reduce ('-' < NEG).
    Conflict between rule 24 and token '*' resolved as reduce ('*' < NEG).
    Conflict between rule 24 and token '.' resolved as shift (NEG < '.').


State 25

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   25     | expr AND . expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 37
    ident   go to state 20


State 26

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   22     | expr '+' . expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 38
    ident   go to state 20


State 27

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   23     | expr '-' . expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 39
    ident   go to state 20


State 28

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   21     | expr '*' . expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 40
    ident   go to state 20


State 29

   26 expr: expr '.' . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 41


State 30

    8 statements: . statements statement
    9           | . %empty
   10 statement_block: '{' . statements '}'

    $default  reduce using rule 9 (statements)

    statements  go to state 42


State 31

   11 statement: IF expr statement_block . opt_elif_parts
   12 opt_elif_parts: . ELIF expr statement_block opt_elif_parts
   13               | . ELSE statement_block
   14               | . %empty  [$end, IF, IDENT, '}']

    ELIF  shift, and go to state 43
    ELSE  shift, and go to state 44

    $default  reduce using rule 14 (opt_elif_parts)

    opt_elif_parts  go to state 45


State 32

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   27 actual_args: . %empty  [')']
   28            | . actual_args_nonempty
   29 actual_args_nonempty: . actual_args_nonempty ',' expr
   30                     | . expr
   31 expr: . ident '(' actual_args ')'
   31     | ident '(' . actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    $default  reduce using rule 27 (actual_args)

    l_expr                go to state 18
    expr                  go to state 46
    actual_args           go to state 47
    actual_args_nonempty  go to state 48
    ident                 go to state 20


State 33

   16 statement: l_expr ':' ident . '=' expr ';'

    '='  shift, and go to state 49


State 34

   15 statement: l_expr '=' expr . ';'
   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    ';'  shift, and go to state 50


State 35

    4 class: CLASS ident '(' formals ')' . '{' expr actual_args '}'

    '{'  shift, and go to state 51


State 36

    6 formals: formals ',' . formal
    7 formal: . ident ':' ident
   32 ident: . IDENT

    IDENT  shift, and go to state 7

    formal  go to state 52
    ident   go to state 53


State 37

   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   25     | expr AND expr .  [AND, IDENT, INT_LIT, STRING_LIT, ')', '{', '}', ',', ';']
   26     | expr . '.' ident '(' actual_args ')'

    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 25 (expr)

    Conflict between rule 25 and token AND resolved as reduce (%left AND).
    Conflict between rule 25 and token '+' resolved as shift (AND < '+').
    Conflict between rule 25 and token '-' resolved as shift (AND < '-').
    Conflict between rule 25 and token '*' resolved as shift (AND < '*').
    Conflict between rule 25 and token '.' resolved as shift (AND < '.').


State 38

   21 expr: expr . '*' expr
   22     | expr . '+' expr
   22     | expr '+' expr .  [AND, IDENT, INT_LIT, STRING_LIT, '+', '-', ')', '{', '}', ',', ';']
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 22 (expr)

    Conflict between rule 22 and token AND resolved as reduce (AND < '+').
    Conflict between rule 22 and token '+' resolved as reduce (%left '+').
    Conflict between rule 22 and token '-' resolved as reduce (%left '-').
    Conflict between rule 22 and token '*' resolved as shift ('+' < '*').
    Conflict between rule 22 and token '.' resolved as shift ('+' < '.').


State 39

   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   23     | expr '-' expr .  [AND, IDENT, INT_LIT, STRING_LIT, '+', '-', ')', '{', '}', ',', ';']
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 23 (expr)

    Conflict between rule 23 and token AND resolved as reduce (AND < '-').
    Conflict between rule 23 and token '+' resolved as reduce (%left '+').
    Conflict between rule 23 and token '-' resolved as reduce (%left '-').
    Conflict between rule 23 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 23 and token '.' resolved as shift ('-' < '.').


State 40

   21 expr: expr . '*' expr
   21     | expr '*' expr .  [AND, IDENT, INT_LIT, STRING_LIT, '+', '-', '*', ')', '{', '}', ',', ';']
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    '.'  shift, and go to state 29

    $default  reduce using rule 21 (expr)

    Conflict between rule 21 and token AND resolved as reduce (AND < '*').
    Conflict between rule 21 and token '+' resolved as reduce ('+' < '*').
    Conflict between rule 21 and token '-' resolved as reduce ('-' < '*').
    Conflict between rule 21 and token '*' resolved as reduce (%left '*').
    Conflict between rule 21 and token '.' resolved as shift ('*' < '.').


State 41

   26 expr: expr '.' ident . '(' actual_args ')'

    '('  shift, and go to state 54


State 42

    8 statements: statements . statement
   10 statement_block: '{' statements . '}'
   11 statement: . IF expr statement_block opt_elif_parts
   15          | . l_expr '=' expr ';'
   16          | . l_expr ':' ident '=' expr ';'
   17 l_expr: . IDENT

    IF     shift, and go to state 9
    IDENT  shift, and go to state 10
    '}'    shift, and go to state 55

    statement  go to state 11
    l_expr     go to state 12


State 43

   12 opt_elif_parts: ELIF . expr statement_block opt_elif_parts
   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 56
    ident   go to state 20


State 44

   10 statement_block: . '{' statements '}'
   13 opt_elif_parts: ELSE . statement_block

    '{'  shift, and go to state 30

    statement_block  go to state 57


State 45

   11 statement: IF expr statement_block opt_elif_parts .

    $default  reduce using rule 11 (statement)


State 46

   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'
   30 actual_args_nonempty: expr .  [')', '}', ',']

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 30 (actual_args_nonempty)


State 47

   31 expr: ident '(' actual_args . ')'

    ')'  shift, and go to state 58


State 48

   28 actual_args: actual_args_nonempty .  [')', '}']
   29 actual_args_nonempty: actual_args_nonempty . ',' expr

    ','  shift, and go to state 59

    $default  reduce using rule 28 (actual_args)


State 49

   16 statement: l_expr ':' ident '=' . expr ';'
   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 60
    ident   go to state 20


State 50

   15 statement: l_expr '=' expr ';' .

    $default  reduce using rule 15 (statement)


State 51

    4 class: CLASS ident '(' formals ')' '{' . expr actual_args '}'
   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 61
    ident   go to state 20


State 52

    6 formals: formals ',' formal .

    $default  reduce using rule 6 (formals)


State 53

    7 formal: ident . ':' ident

    ':'  shift, and go to state 62


State 54

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   26     | expr '.' ident '(' . actual_args ')'
   27 actual_args: . %empty  [')']
   28            | . actual_args_nonempty
   29 actual_args_nonempty: . actual_args_nonempty ',' expr
   30                     | . expr
   31 expr: . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    $default  reduce using rule 27 (actual_args)

    l_expr                go to state 18
    expr                  go to state 46
    actual_args           go to state 63
    actual_args_nonempty  go to state 48
    ident                 go to state 20


State 55

   10 statement_block: '{' statements '}' .

    $default  reduce using rule 10 (statement_block)


State 56

   10 statement_block: . '{' statements '}'
   12 opt_elif_parts: ELIF expr . statement_block opt_elif_parts
   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    '{'  shift, and go to state 30

    statement_block  go to state 64


State 57

   13 opt_elif_parts: ELSE statement_block .

    $default  reduce using rule 13 (opt_elif_parts)


State 58

   31 expr: ident '(' actual_args ')' .

    $default  reduce using rule 31 (expr)


State 59

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   29 actual_args_nonempty: actual_args_nonempty ',' . expr
   31 expr: . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 65
    ident   go to state 20


State 60

   16 statement: l_expr ':' ident '=' expr . ';'
   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29
    ';'  shift, and go to state 66


State 61

    4 class: CLASS ident '(' formals ')' '{' expr . actual_args '}'
   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   21     | expr . '*' expr
   22     | . expr '+' expr
   22     | expr . '+' expr
   23     | . expr '-' expr
   23     | expr . '-' expr
   24     | . '-' expr
   25     | . expr AND expr
   25     | expr . AND expr
   26     | . expr '.' ident '(' actual_args ')'
   26     | expr . '.' ident '(' actual_args ')'
   27 actual_args: . %empty  ['}']
   28            | . actual_args_nonempty
   29 actual_args_nonempty: . actual_args_nonempty ',' expr
   30                     | . expr
   31 expr: . ident '(' actual_args ')'
   32 ident: . IDENT

    AND         shift, and go to state 25
    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '+'         shift, and go to state 26
    '-'         shift, and go to state 67
    '*'         shift, and go to state 28
    '.'         shift, and go to state 29

    $default  reduce using rule 27 (actual_args)

    l_expr                go to state 18
    expr                  go to state 46
    actual_args           go to state 68
    actual_args_nonempty  go to state 48
    ident                 go to state 20


State 62

    7 formal: ident ':' . ident
   32 ident: . IDENT

    IDENT  shift, and go to state 7

    ident  go to state 69


State 63

   26 expr: expr '.' ident '(' actual_args . ')'

    ')'  shift, and go to state 70


State 64

   12 opt_elif_parts: . ELIF expr statement_block opt_elif_parts
   12               | ELIF expr statement_block . opt_elif_parts
   13               | . ELSE statement_block
   14               | . %empty  [$end, IF, IDENT, '}']

    ELIF  shift, and go to state 43
    ELSE  shift, and go to state 44

    $default  reduce using rule 14 (opt_elif_parts)

    opt_elif_parts  go to state 71


State 65

   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'
   29 actual_args_nonempty: actual_args_nonempty ',' expr .  [')', '}', ',']

    AND  shift, and go to state 25
    '+'  shift, and go to state 26
    '-'  shift, and go to state 27
    '*'  shift, and go to state 28
    '.'  shift, and go to state 29

    $default  reduce using rule 29 (actual_args_nonempty)


State 66

   16 statement: l_expr ':' ident '=' expr ';' .

    $default  reduce using rule 16 (statement)


State 67

   17 l_expr: . IDENT
   18 expr: . l_expr
   19     | . STRING_LIT
   20     | . INT_LIT
   21     | . expr '*' expr
   22     | . expr '+' expr
   23     | . expr '-' expr
   23     | expr '-' . expr
   24     | . '-' expr
   24     | '-' . expr
   25     | . expr AND expr
   26     | . expr '.' ident '(' actual_args ')'
   31     | . ident '(' actual_args ')'
   32 ident: . IDENT

    IDENT       shift, and go to state 14
    INT_LIT     shift, and go to state 15
    STRING_LIT  shift, and go to state 16
    '-'         shift, and go to state 17

    l_expr  go to state 18
    expr    go to state 72
    ident   go to state 20


State 68

    4 class: CLASS ident '(' formals ')' '{' expr actual_args . '}'

    '}'  shift, and go to state 73


State 69

    7 formal: ident ':' ident .

    $default  reduce using rule 7 (formal)


State 70

   26 expr: expr '.' ident '(' actual_args ')' .

    $default  reduce using rule 26 (expr)


State 71

   12 opt_elif_parts: ELIF expr statement_block opt_elif_parts .

    $default  reduce using rule 12 (opt_elif_parts)


State 72

   21 expr: expr . '*' expr
   22     | expr . '+' expr
   23     | expr . '-' expr
   23     | expr '-' expr .  [AND, IDENT, INT_LIT, STRING_LIT, '+', '-', '}']
   24     | '-' expr .  [AND, '+', '-', '*', '}', ',']
   25     | expr . AND expr
   26     | expr . '.' ident '(' actual_args ')'

    '.'  shift, and go to state 29

    AND       reduce using rule 23 (expr)
    AND       [reduce using rule 24 (expr)]
    '+'       reduce using rule 23 (expr)
    '+'       [reduce using rule 24 (expr)]
    '-'       reduce using rule 23 (expr)
    '-'       [reduce using rule 24 (expr)]
    '*'       reduce using rule 24 (expr)
    '}'       reduce using rule 23 (expr)
    '}'       [reduce using rule 24 (expr)]
    ','       reduce using rule 24 (expr)
    $default  reduce using rule 23 (expr)

    Conflict between rule 23 and token AND resolved as reduce (AND < '-').
    Conflict between rule 23 and token '+' resolved as reduce (%left '+').
    Conflict between rule 23 and token '-' resolved as reduce (%left '-').
    Conflict between rule 23 and token '*' resolved as shift ('-' < '*').
    Conflict between rule 23 and token '.' resolved as shift ('-' < '.').
    Conflict between rule 24 and token '*' resolved as reduce ('*' < NEG).
    Conflict between rule 24 and token '.' resolved as shift (NEG < '.').


State 73

    4 class: CLASS ident '(' formals ')' '{' expr actual_args '}' .

    $default  reduce using rule 4 (class)
